<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.MyCommentMapper">
	
	<!-- cache : SELECT 명령의 검색결과(JAVA 객체)를 임시 메모리(Cache Memory)에 저장하여 
				 빠른 검색 결과를 제공하기 위한 엘리먼트 -> 가독성이 증가한다. -->
	<!-- => INSERT, UPDATE, DELETE 명령이 실행되면 임시메모리에 저장된 검색결과는 자동으로 초기화된다.
			(검색결과가 바뀌기 때문에. 다시 SELECT 실행하면 또 임시메모리에 검색결과가 저장됨)
			따라서, 위의 세 명령을 자주하는 데이터들은 캐시를 사용하는 것이 비효율적이라 잘 사용하지 않음. -->
	<!-- => 검색결과를 저장하는 객체는 반드시 객체 직렬화 클래스로 작성해야 한다. -->
	<!-- <cache/> -->

	<insert id="insertComment1" parameterType="MyComment1">
		insert into mycomment values(mycomment_seq.nextval, #{commentId}, #{commentContent}, sysdate)
	</insert>
	
	<insert id="insertComment2" parameterType="MyComment1">
		<!-- selectKey : SELECT 명령의 검색결과값을 제공받아 insert 엘리먼트의 parameterType 속성값으로
			 설정된 객체의 필드값으로 저장하기 위한 하위 엘리먼트 
			 => insert 엘리먼트의 종속된 엘리먼트이다.(따라서 다른곳에서는 못쓰고 insert에서만 사용할 수 있다.)-->
		<!-- => 사용이유 : 자동 증가값 또는 난수값을 SELECT 명령으로 검색하여 객체 필드에 저장하여 
						   insert 명령에서 사용하기 위해 작성한다. -->
		<!-- resultType 속성 : SELECT 명령으로 검색된 결과값을 제공받기 위한 java 자료형을
			 속성값으로 설정하면 된다.
			 => 자바 자료형 대신 typeAlias 엘리먼트로 제공된 별칭을 사용할 수 있다. -->
		<!-- keyProperty 속성 : insert 엘리먼트의 parameterType 속성값으로 설정된 클래스의 필드명을 속성값으로 설정한다. -->
		<!-- order 속성 : [BEFORE] 또는 [AFTER] 중 하나를 속성값으로 설정한다. -->
		<selectKey resultType="int" keyProperty="commentNo" order="BEFORE">
			select mycomment_seq.nextval from dual
		</selectKey>
		insert into mycomment values(#{commentNo}, #{commentId}, #{commentContent}, sysdate)
	</insert>
	
	<!-- resultType 속성을 사용하여 검색행이 Java 객체로 제공되도록 자동 매핑 처리 -->
	<!-- => 검색행의 컬럼명과 resultType 속성값으로 설정된 클래스의 필드명이 같도록 작성 -->
	<select id="selectCommentList1" resultType="MyComment1">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>

	
	<!-- comment2는 수동매핑을 하기로 해서 자동매핑이 안되기 때문에 이렇게 하면 안됨. -->
	<!-- 검색행의 컬럼명과 resultType 속성값으로 설정된 클래스의 필드명이 모두 다르기 때문에
	resultType 속성값으로 설정된 클래스의 객체 대신 NULL이 제공된다. =>NullPointException 발생함. --> 
	<!-- 
	<select id="selectCommentList2" resultType="MyComment2">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>
	 -->
	 
	<!-- 해결법 : 검색행의 컬럼명을 resultType 속성값으로 설정된 클래스의 필드명과 같도록 ColumnAlias 기능을 사용하여 검색하면 된다. -->
	<!-- 만약 식별자로 사용하기 부적절한 단어(date, (공백)등)를 쓰게된다면 "" 기호를 사용하여 Alias(별칭)으로 사용가능하다. -->
	<!--  
	<select id="selectCommentList2" resultType="MyComment2">
		select comment_no no, comment_id id, comment_content content, comment_date "date" 
			from mycomment order by comment_no desc
	</select>
	-->
	
	
	<!-- resultMap 엘리먼트를 이용하여 검색행의 컬럼값을 객체 필드에 저장되도록 설정하여 
	검색행을 Java 객체로 제공 -->	
	<!-- => type 속성값으로 설정된 클래스의 기본 생성자를 이용하여 객체를 생성하고 id 엘리먼트 또는 
	result 엘리먼트를 사용하여 객체의 Setter 메소드를 호출하여 검색행의 컬럼값으로 필드값 변경 -->
	 
	 <resultMap type="MyComment2" id="myComment2ResultMap">
	 	<id column="comment_no" property="no"/>
	 	<result column="comment_id" property="id"/>
	 	<result column="comment_content" property="content"/>
	 	<result column="comment_date" property="date"/>
	 </resultMap>
	 
	 
	<!-- select 엘리먼트의 resultMap 속성을 사용하여 검색행을 Java 객체로 수동 매핑하여 제공 -->
	<!-- 
	 <select id="selectCommentList2" resultMap="myComment2ResultMap">
	 	select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no
	 </select>
	 -->
	 
	 
	<!-- constructor 엘리먼트를 사용하여 type 속성값으로 설정된 클래스의 매개변수가 작성된
		 생성자로 객체를 생성하고 생성자 매개변수에 검색행의 컬럼값을 전달받아 객체 필드값으로 저장 -->
	<!-- => resultMap 엘리먼트의 하위 엘리먼트로 constructor 엘리먼트는 0개 또는 1개만 작성 가능 -->
	 <resultMap type="MyComment2" id="myComment2ConstructorResultMap">
		<!-- constructor : resultMap 엘리먼트의 type 속성값으로 설정된 클래스의 생성자를
		이용하여 매핑 처리하기 위한 정보를 제공하는 엘리먼트 -->
		<!-- => 하위 엘리먼트 : idArg, arg  -->
		<!-- => 생성자의 매개변수의 개수 및 자료형 & 하위 엘리먼트의 개수 및 자료형이 반드시 동일해야 한다. -->
	 	<constructor>
			<!-- idArg : 검색행의 컬럼값을 생성자 매개변수에 전달하기 위한 엘리먼트 -->
			<!-- => PK 제약조건이 설정된 컬럼값을 제공받아 생성자 매개변수에 전달하기 위해 사용 -->
			<!-- column 속성 : 검색행의 컬럼명을 속성값으로 설정 -->
			<!-- javaType 속성 : 검색행의 컬럼값을 저장할 매개변수의 Java 자료형을 속성값으로 설정 -->
			<!-- => Java 자료형 대신 typeAlias로 설정된 별칭 사용 가능 -->
	 		<idArg column="comment_no" javaType="int"/>
	 		<!-- javaType="int"를 쓰면 안됨. 그냥 "int"라고 쓰면 클래스로 취급해버림(integer클래스). 별칭이 아님. 식별자로 사용 불가능.
	 			 따라서 앞에 _ 기호를 붙이거나("_int") 풀네임으로 integer라고 써줘야함. -->
	 		<!-- string은 값을 주소로 저장하는 것이고 int는 스텍 영역에 숫자가 저장되는 것이라 저장되는 곳이 다르다. -->
	 		
			<!-- arg : 검색행의 컬럼값을 생성자 매개변수에 전달하기 위한 엘리먼트 -->
	 		<arg column="comment_id" javaType="string"/>
	 		<!-- 밑에 arg가 아닌 result 엘리먼트로 다시 설정하기 위해 주석처리
	 		<arg column="comment_content" javaType="string"/>
	 		<arg column="comment_date" javaType="string"/>
	 		-->
		</constructor>
		<!-- constructor 엘리먼트와 id 엘리먼트(result 엘리먼트)를 같이 사용하여 매핑 정보 제공 가능 -->
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
	</resultMap>
	 
	<select id="selectCommentList2" resultMap="myComment2ConstructorResultMap">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>
	
	
	<!-- resultMap(수동매핑) 혹은 select(자동매핑) 를 사용하면 됨 -->	
	<!-- <<자동매핑 이용하기>>
	<select id="selectCommentList3" resultType="MyComment3">
		select comment_no "no", comment_id "id", user_name "name", comment_content "content"
			, comment_date "date" from mycomment join myuser on  comment_id=user_id order by comment_no desc;
	</select>
	-->
	
	<!-- <<수동 매핑 이용하기>> -->
	<resultMap type="MyComment3" id="myComment3ResultMap">
		<id column="comment_no" property="no"/>
		<result column="comment_id" property="id"/>
		<result column="comment_content" property="content"/>
		<result column="comment_date" property="date"/>
		<result column="user_name" property="name"/>
	</resultMap>
	
	<select id="selectCommentList3" resultMap="myComment3ResultMap">
		select comment_no, comment_id, user_name, comment_content, comment_date 
			from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	
	
	<!-- 여기서부터 테이블 조인 시작 -->
	<select id="selectCommentUserList1" resultType="MyCommentUser1">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name 
			from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	
	<resultMap type="MyCommentUser2" id="myCommentUser2ResultMap">
		<!-- association : 1:1 관계의 테이블 조인에서 1개의 검색행을 Java 객체로 생성하여
		type 속성값으로 설정된 클래스의 필드에 저장되도록 매핑 처리하는 엘리먼트 -->
		<!-- => id 엘리먼트 또는 result 엘리먼트를 하위 엘리먼트로 사용하여 association 엘리먼트로
		생성될 객체의 필드에 검색행의 컬럼값이 저장되도록 매핑 처리 -->
		<!-- property 속성 : 객체가 저장된 클래스의 필드명을 속성값으로 설정 -->
		<!-- javaType 속성 : 검색행을 이용하여 생성될 객체의 Java 자료형을 속성값으로 설정 -->
		<!-- => Java 자료형 대신 typeAlias로 설정된 별칭 사용 가능 -->
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>		
			<result column="user_name" property="userName"/>		
		</association>
	</resultMap>
	
	<select id="selectCommentUserList2" resultMap="myCommentUser2ResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name 
			from mycomment join myuser on comment_id=user_id order by comment_no desc
	</select>
	
	
	
	<!-- 게시글 번호를 전달받아 MYCOMMENT 테이블에 저장된 게시글정보를 검색하여 MyComment1 객체로
		 제공하는 엘리먼트 => 검색항이 1개이다. -->
	<select id="selectComment" parameterType="int" resultType="MyComment1">
		select comment_no, comment_id, comment_content, comment_date from mycomment order by comment_no desc
	</select>
	
	<!-- 게시글 번호를 전달받아 MYREPLY 테이블에 저장된 게시글정보를 검색하여 MyReply 객체로
		 제공하는 엘리먼트 => 검색항이 0개이다. -->
	<select id="selectCommentNoReplyList" parameterType="int" resultType="Myreply">
		select reply_no, reply_id, reply_content, reply_date, reply_comment_no
			from myreply where reply_comment_no=#{replyCommentNo} order by reply_no desc
			<!-- #{} : 외부에서 가져오는 값 -->
	</select>
	<!-- 위의 두 코드는 join을 만들지 않고 따로따로 만들어준 것 -->
	


	
	<!-- resultMap 엘리먼트의 하위 엘리먼트 작성 순서 -->
	<!-- => constructor, id, result, association, collection, discriminator -->
	<!-- 문제점)resultMap 엘리먼트의 첫번째 하위 엘리먼트로 association 엘리먼트를 사용한
	경우 내부적으로 selectOne() 메소드를 사용하여 하나의 검색행을 Java 객체로 생성하여 제공 -->
	<!-- => SELECT 명령으로 다수의 행이 검색된 경우 TooManyResultsException 발생  -->
	<!-- 해결법)다수의 행이 검색되는 경우 resultMap 엘리먼트의 첫번째 자식 엘리먼트로 
	association 엘리먼트가 아닌 다른 엘리먼트 사용 -->
	<resultMap type="MyCommentReply" id="myCommentReplyResultMap">
		<id column="comment_no" property="commentNo"/>
	
		<association property="comment" javaType="MyComment1">
			<id column="comment_no" property="commentNo"/>
			<result column="comment_id" property="commentId"/>
			<result column="comment_content" property="commentContent"/>
			<result column="comment_date" property="commentDate"/>
		</association>
		
		<!-- collection : 1:N 관계의 테이블 조인에서 0개 이상의 검색행을 List 객체로 생성하여 resultMap 
		엘리먼트의 type 속성값으로 설정된 클래스의 객체 필드에 저장되도록 매핑 처리하는 엘리먼트 -->
		<!-- => id 엘리먼트 또는 result 엘리먼트를 하위 엘리먼트로 사용하여 collection 엘리먼트로
		생성될 List 객체의 요소(객체) 필드에 검색행의 컬럼값이 저장되도록 매핑 처리 -->
		<!-- property 속성 : collection 엘리먼트로 생성된 List 객체가 저장될 클래스의 필드명을 속성값으로 설정 -->
		<!-- ofType 속성 : List 객체의 요소로 저장될 객체의 Java 자료형을 속성값으로 설정 -->
		<!-- => Java 자료형 대신 typeAlias로 설정된 별칭 사용 가능 -->
		<collection property="replyList" ofType="MyReply">
		<!-- 해석 : 필드에 저장된 리스트 객체의 요소는 myReply -->
			<id column="reply_no" property="replyNo"/>
			<result column="reply_id" property="replyId"/>
			<result column="reply_content" property="replyContent"/>
			<result column="reply_date" property="replyDate"/>
			<result column="reply_comment_no" property="replyCommentNo"/>
		</collection>
	</resultMap>
	
	<!-- 게시글번호를 전달받아 MYCOMMENT 테이블에 저장된 게시글정보(1개)와 MYREPLY 테이블에
	저장된 댓글정보(0개 이상)를 검색하여 MyCommentReply 객체로 제공하는 엘리먼트 -->	
	<!-- => 1:N 관계의 테이블 조인에서는 OUTER JOIN를 사용하여 검색 -->
	<select id="selectCommentReply" parameterType="int" resultMap="myCommentReplyResultMap">
		select comment_no, comment_id, comment_content, comment_date, reply_no, reply_id, reply_content
		, reply_date, reply_comment_no from mycomment left join myreply on comment_no=reply_comment_no 
		where comment_no=#{commentNo} order by reply_no desc
	</select>
	
	<!-- 
	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap">
		<id column="comment_no" property="commentNo"/>
		<result column="comment_id" property="commentId"/>
		<result column="comment_content" property="commentContent"/>
		<result column="comment_date" property="commentDate"/>
		
		<association property="user" javaType="MyUser">
			<id column="user_id" property="userId"/>
			<result column="user_name" property="userName"/>
		</association>
		
		<collection property="replyUserList" ofType="MyReplyUser">
			<association property="reply" javaType="MyReply">
				<id column="reply_no" property="replyNo"/>
				<result column="reply_id" property="replyId"/>
				<result column="reply_content" property="replyContent"/>
				<result column="reply_date" property="replyDate"/>
				<result column="reply_comment_no" property="replyCommentNo"/>
			</association>
			<association property="user" javaType="MyUser">
				<id column="reply_user_id" property="userId"/>
				<result column="reply_user_name" property="userName"/>
			</association>
		</collection>
	</resultMap>	
	-->
	
	<!-- 게시글번호를 전달받아 MYCOMMENT 테이블(MYUSER 테이블)에 저장된 게시글정보(1개)와 
	MYREPLY 테이블(MYUSER 테이블)에	저장된 댓글정보(0개 이상)를 검색하여 MyCommentReplyUser
	객체로 제공하는 엘리먼트 -->
	<!-- 
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name
			, reply_no, reply_id, reply_content, reply_date, reply_comment_no, reply_user_id
			, reply_user_name from mycomment join myuser on comment_id=user_id left join
			(select reply_no, reply_id, reply_content, reply_date, reply_comment_no
			, user_id reply_user_id, user_name reply_user_name from myreply join myuser
			on reply_id=user_id) on comment_no=reply_comment_no where comment_no=#{commentNo}
			order by reply_no desc
	</select>
	-->
	
	
	
	<!-- autoMapping 속성 : false 또는 true 중 하나를 속성값으로 설정 -->
	<!-- => autoMapping 속성값을 [true]로 설정한 경우 검색행의 컬럼과 필드명이 같은 경우 자동 매핑 처리 -->	 
	<!-- resultMapping은 원래 수동매핑하는 것이지만 autoMapping 속성을 추가하면 자동매핑이 가능하다.
		 (columm과 property를 다 적어줄 필요가 없어진다.) 
		 단, 이름이 같아야한다는 전제가 꼭 깔려야 가능하다. -->
	<resultMap type="MyCommentReplyUser" id="myCommentReplyUserResultMap" autoMapping="true">
		<id column="comment_no" property="commentNo"/>
		<association property="user" javaType="MyUser" autoMapping="true"/>
		<collection property="replyUserList" select="selectReplyUser" column="comment_no"/>
	</resultMap>
	
	<resultMap type="MyReplyUser" id="myReplyUserResulyMapper">
		<association property="reply" javaType="MyReply" autoMapping="true"/>
		<association property="user" javaType="MyUser" autoMapping="true"/>
	</resultMap>
	
	<select id="selectReplyUser" parameterType="int" resultMap="myReplyUserResulyMapper">
		select reply_no, reply_id, reply_content, reply_date, reply_comment_no, user_id
			, user_name from myreply join myuser on reply_id=user_id where 
			reply_comment_no=#{replyCommentNo} order by reply_no desc
	</select>
	
	<select id="selectCommentReplyUser" parameterType="int" resultMap="myCommentReplyUserResultMap">
		select comment_no, comment_id, comment_content, comment_date, user_id, user_name
			from mycomment join myuser on comment_id=user_id where comment_no=#{commentNo}
	</select>
	
	<!-- select를 한꺼번에 시키는 게 아니라 먼저 하나를 시키고 그 안에서 또 하나를 시키는 방식으로 진행하면 
		 조인을 전부 한꺼번에 시키지 않고도 여러 개를 진행 시킬 수 있음.
		 (resultMap과 select를 여러개 만드는 방식을 사용함 - 가독성이 더 좋음.) -->
		 
		 
		 
		 
</mapper>
	

